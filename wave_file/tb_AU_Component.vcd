$date
	Thu Jan  4 23:29:33 2024
$end
$version
	Questa Intel Starter FPGA Edition Version 2021.2
$end
$timescale
	1ps
$end

$scope module tb_AU_Component $end
$var reg 1 ! clk $end
$var reg 1 " rst_n $end
$var reg 5 # rs1_in [4:0] $end
$var reg 5 $ rs2_in [4:0] $end
$var reg 1 % rs1_valid $end
$var reg 1 & rs2_valid $end
$var reg 5 ' rd [4:0] $end
$var reg 32 ( rs1_data [31:0] $end
$var reg 32 ) rs2_data [31:0] $end
$var reg 32 * instr_pc [31:0] $end
$var reg 32 + imm_extend [31:0] $end
$var reg 5 , execute_type [4:0] $end
$var reg 5 - order [4:0] $end
$var reg 5 . rs1_out [4:0] $end
$var reg 5 / rs2_out [4:0] $end
$var reg 1 0 busy $end
$var reg 43 1 rd_order_result [42:0] $end

$scope module AU_Component_instance $end
$var wire 1 2 clk $end
$var wire 1 3 rst_n $end
$var wire 1 4 rs1_in [4] $end
$var wire 1 5 rs1_in [3] $end
$var wire 1 6 rs1_in [2] $end
$var wire 1 7 rs1_in [1] $end
$var wire 1 8 rs1_in [0] $end
$var wire 1 9 rs2_in [4] $end
$var wire 1 : rs2_in [3] $end
$var wire 1 ; rs2_in [2] $end
$var wire 1 < rs2_in [1] $end
$var wire 1 = rs2_in [0] $end
$var wire 1 > rs1_valid $end
$var wire 1 ? rs2_valid $end
$var wire 1 @ rd [4] $end
$var wire 1 A rd [3] $end
$var wire 1 B rd [2] $end
$var wire 1 C rd [1] $end
$var wire 1 D rd [0] $end
$var wire 1 E rs1_data [31] $end
$var wire 1 F rs1_data [30] $end
$var wire 1 G rs1_data [29] $end
$var wire 1 H rs1_data [28] $end
$var wire 1 I rs1_data [27] $end
$var wire 1 J rs1_data [26] $end
$var wire 1 K rs1_data [25] $end
$var wire 1 L rs1_data [24] $end
$var wire 1 M rs1_data [23] $end
$var wire 1 N rs1_data [22] $end
$var wire 1 O rs1_data [21] $end
$var wire 1 P rs1_data [20] $end
$var wire 1 Q rs1_data [19] $end
$var wire 1 R rs1_data [18] $end
$var wire 1 S rs1_data [17] $end
$var wire 1 T rs1_data [16] $end
$var wire 1 U rs1_data [15] $end
$var wire 1 V rs1_data [14] $end
$var wire 1 W rs1_data [13] $end
$var wire 1 X rs1_data [12] $end
$var wire 1 Y rs1_data [11] $end
$var wire 1 Z rs1_data [10] $end
$var wire 1 [ rs1_data [9] $end
$var wire 1 \ rs1_data [8] $end
$var wire 1 ] rs1_data [7] $end
$var wire 1 ^ rs1_data [6] $end
$var wire 1 _ rs1_data [5] $end
$var wire 1 ` rs1_data [4] $end
$var wire 1 a rs1_data [3] $end
$var wire 1 b rs1_data [2] $end
$var wire 1 c rs1_data [1] $end
$var wire 1 d rs1_data [0] $end
$var wire 1 e rs2_data [31] $end
$var wire 1 f rs2_data [30] $end
$var wire 1 g rs2_data [29] $end
$var wire 1 h rs2_data [28] $end
$var wire 1 i rs2_data [27] $end
$var wire 1 j rs2_data [26] $end
$var wire 1 k rs2_data [25] $end
$var wire 1 l rs2_data [24] $end
$var wire 1 m rs2_data [23] $end
$var wire 1 n rs2_data [22] $end
$var wire 1 o rs2_data [21] $end
$var wire 1 p rs2_data [20] $end
$var wire 1 q rs2_data [19] $end
$var wire 1 r rs2_data [18] $end
$var wire 1 s rs2_data [17] $end
$var wire 1 t rs2_data [16] $end
$var wire 1 u rs2_data [15] $end
$var wire 1 v rs2_data [14] $end
$var wire 1 w rs2_data [13] $end
$var wire 1 x rs2_data [12] $end
$var wire 1 y rs2_data [11] $end
$var wire 1 z rs2_data [10] $end
$var wire 1 { rs2_data [9] $end
$var wire 1 | rs2_data [8] $end
$var wire 1 } rs2_data [7] $end
$var wire 1 ~ rs2_data [6] $end
$var wire 1 !! rs2_data [5] $end
$var wire 1 "! rs2_data [4] $end
$var wire 1 #! rs2_data [3] $end
$var wire 1 $! rs2_data [2] $end
$var wire 1 %! rs2_data [1] $end
$var wire 1 &! rs2_data [0] $end
$var wire 1 '! instr_pc [31] $end
$var wire 1 (! instr_pc [30] $end
$var wire 1 )! instr_pc [29] $end
$var wire 1 *! instr_pc [28] $end
$var wire 1 +! instr_pc [27] $end
$var wire 1 ,! instr_pc [26] $end
$var wire 1 -! instr_pc [25] $end
$var wire 1 .! instr_pc [24] $end
$var wire 1 /! instr_pc [23] $end
$var wire 1 0! instr_pc [22] $end
$var wire 1 1! instr_pc [21] $end
$var wire 1 2! instr_pc [20] $end
$var wire 1 3! instr_pc [19] $end
$var wire 1 4! instr_pc [18] $end
$var wire 1 5! instr_pc [17] $end
$var wire 1 6! instr_pc [16] $end
$var wire 1 7! instr_pc [15] $end
$var wire 1 8! instr_pc [14] $end
$var wire 1 9! instr_pc [13] $end
$var wire 1 :! instr_pc [12] $end
$var wire 1 ;! instr_pc [11] $end
$var wire 1 <! instr_pc [10] $end
$var wire 1 =! instr_pc [9] $end
$var wire 1 >! instr_pc [8] $end
$var wire 1 ?! instr_pc [7] $end
$var wire 1 @! instr_pc [6] $end
$var wire 1 A! instr_pc [5] $end
$var wire 1 B! instr_pc [4] $end
$var wire 1 C! instr_pc [3] $end
$var wire 1 D! instr_pc [2] $end
$var wire 1 E! instr_pc [1] $end
$var wire 1 F! instr_pc [0] $end
$var wire 1 G! imm_extend [31] $end
$var wire 1 H! imm_extend [30] $end
$var wire 1 I! imm_extend [29] $end
$var wire 1 J! imm_extend [28] $end
$var wire 1 K! imm_extend [27] $end
$var wire 1 L! imm_extend [26] $end
$var wire 1 M! imm_extend [25] $end
$var wire 1 N! imm_extend [24] $end
$var wire 1 O! imm_extend [23] $end
$var wire 1 P! imm_extend [22] $end
$var wire 1 Q! imm_extend [21] $end
$var wire 1 R! imm_extend [20] $end
$var wire 1 S! imm_extend [19] $end
$var wire 1 T! imm_extend [18] $end
$var wire 1 U! imm_extend [17] $end
$var wire 1 V! imm_extend [16] $end
$var wire 1 W! imm_extend [15] $end
$var wire 1 X! imm_extend [14] $end
$var wire 1 Y! imm_extend [13] $end
$var wire 1 Z! imm_extend [12] $end
$var wire 1 [! imm_extend [11] $end
$var wire 1 \! imm_extend [10] $end
$var wire 1 ]! imm_extend [9] $end
$var wire 1 ^! imm_extend [8] $end
$var wire 1 _! imm_extend [7] $end
$var wire 1 `! imm_extend [6] $end
$var wire 1 a! imm_extend [5] $end
$var wire 1 b! imm_extend [4] $end
$var wire 1 c! imm_extend [3] $end
$var wire 1 d! imm_extend [2] $end
$var wire 1 e! imm_extend [1] $end
$var wire 1 f! imm_extend [0] $end
$var wire 1 g! execute_type [4] $end
$var wire 1 h! execute_type [3] $end
$var wire 1 i! execute_type [2] $end
$var wire 1 j! execute_type [1] $end
$var wire 1 k! execute_type [0] $end
$var wire 1 l! order [4] $end
$var wire 1 m! order [3] $end
$var wire 1 n! order [2] $end
$var wire 1 o! order [1] $end
$var wire 1 p! order [0] $end
$var reg 5 q! rs1_out [4:0] $end
$var reg 5 r! rs2_out [4:0] $end
$var reg 1 s! busy $end
$var reg 43 t! rd_order_result [42:0] $end
$var reg 32 u! result [31:0] $end
$var reg 1 v! done $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
0"
bx #
bx $
x%
x&
bx '
bx (
bx )
bx *
bx +
bx ,
bx -
b0 .
b0 /
00
b0 1
b0 q!
b0 r!
0s!
b0 t!
bx u!
xv!
xp!
xo!
xn!
xm!
xl!
xk!
xj!
xi!
xh!
xg!
xf!
xe!
xd!
xc!
xb!
xa!
x`!
x_!
x^!
x]!
x\!
x[!
xZ!
xY!
xX!
xW!
xV!
xU!
xT!
xS!
xR!
xQ!
xP!
xO!
xN!
xM!
xL!
xK!
xJ!
xI!
xH!
xG!
xF!
xE!
xD!
xC!
xB!
xA!
x@!
x?!
x>!
x=!
x<!
x;!
x:!
x9!
x8!
x7!
x6!
x5!
x4!
x3!
x2!
x1!
x0!
x/!
x.!
x-!
x,!
x+!
x*!
x)!
x(!
x'!
x&!
x%!
x$!
x#!
x"!
x!!
x~
x}
x|
x{
xz
xy
xx
xw
xv
xu
xt
xs
xr
xq
xp
xo
xn
xm
xl
xk
xj
xi
xh
xg
xf
xe
xd
xc
xb
xa
x`
x_
x^
x]
x\
x[
xZ
xY
xX
xW
xV
xU
xT
xS
xR
xQ
xP
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
xE
xD
xC
xB
xA
x@
x?
x>
x=
x<
x;
x:
x9
x8
x7
x6
x5
x4
03
02
$end
#10000
1!
12
#20000
1"
b1 #
b10 $
1%
1&
b111 '
b1010 (
b1010 )
b11110 *
b1100100 +
b0 ,
b1 -
0!
1p!
0o!
0n!
0m!
0l!
1D
1C
1B
0A
0@
0=
1<
0;
0:
09
18
07
06
05
04
13
1>
1?
0k!
0j!
0i!
0h!
0g!
0f!
0e!
1d!
0c!
0b!
1a!
1`!
0_!
0^!
0]!
0\!
0[!
0Z!
0Y!
0X!
0W!
0V!
0U!
0T!
0S!
0R!
0Q!
0P!
0O!
0N!
0M!
0L!
0K!
0J!
0I!
0H!
0G!
0F!
1E!
1D!
1C!
1B!
0A!
0@!
0?!
0>!
0=!
0<!
0;!
0:!
09!
08!
07!
06!
05!
04!
03!
02!
01!
00!
0/!
0.!
0-!
0,!
0+!
0*!
0)!
0(!
0'!
0&!
1%!
0$!
1#!
0"!
0!!
0~
0}
0|
0{
0z
0y
0x
0w
0v
0u
0t
0s
0r
0q
0p
0o
0n
0m
0l
0k
0j
0i
0h
0g
0f
0e
0d
1c
0b
1a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
0V
0U
0T
0S
0R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0E
02
1v!
b10100 u!
#30000
1!
12
b1 q!
b10 r!
b11100001000000000000000000000000000101001 t!
b11100001000000000000000000000000000101001 1
b10 /
b1 .
#40000
0!
02
#50000
1!
12
#60000
0!
02
#70000
1!
12
#80000
0%
0!
0>
02
0v!
#90000
1!
12
1s!
b0 t!
b0 1
10
#100000
0!
02
#110000
1!
12
#120000
0!
02
#130000
1!
12
#140000
0!
02
#150000
1!
12
#160000
0!
02
#170000
1!
12
