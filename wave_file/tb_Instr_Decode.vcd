$date
	Thu Dec 21 05:57:05 2023
$end
$version
	Questa Intel Starter FPGA Edition Version 2021.2
$end
$timescale
	1ps
$end

$scope module tb_Instr_Decode $end
$var reg 1 ! clk $end
$var reg 1 " rst_n $end
$var reg 64 # fetch_instr_pc [63:0] $end
$var reg 1 $ instr_valid $end
$var reg 1 % rs1_valid $end
$var reg 1 & rs2_valid $end
$var reg 32 ' rs1_data [31:0] $end
$var reg 32 ( rs2_data [31:0] $end
$var reg 3 ) au_free [2:0] $end
$var reg 3 * mul_free [2:0] $end
$var reg 1 + lsu_free $end
$var reg 1 , busy $end
$var reg 5 - rs1 [4:0] $end
$var reg 5 . rs2 [4:0] $end
$var reg 1 / jump $end
$var reg 1 0 jump_wait $end
$var reg 1 1 jump_accept $end
$var reg 32 2 jump_addr [31:0] $end
$var reg 17 3 rd_rs1_rs2 [16:0] $end
$var reg 8 4 execute_type [7:0] $end
$var reg 32 5 imm_extend [31:0] $end

$scope module Instr_Decode_instance $end
$var wire 1 6 clk $end
$var wire 1 7 rst_n $end
$var wire 1 8 fetch_instr_pc [63] $end
$var wire 1 9 fetch_instr_pc [62] $end
$var wire 1 : fetch_instr_pc [61] $end
$var wire 1 ; fetch_instr_pc [60] $end
$var wire 1 < fetch_instr_pc [59] $end
$var wire 1 = fetch_instr_pc [58] $end
$var wire 1 > fetch_instr_pc [57] $end
$var wire 1 ? fetch_instr_pc [56] $end
$var wire 1 @ fetch_instr_pc [55] $end
$var wire 1 A fetch_instr_pc [54] $end
$var wire 1 B fetch_instr_pc [53] $end
$var wire 1 C fetch_instr_pc [52] $end
$var wire 1 D fetch_instr_pc [51] $end
$var wire 1 E fetch_instr_pc [50] $end
$var wire 1 F fetch_instr_pc [49] $end
$var wire 1 G fetch_instr_pc [48] $end
$var wire 1 H fetch_instr_pc [47] $end
$var wire 1 I fetch_instr_pc [46] $end
$var wire 1 J fetch_instr_pc [45] $end
$var wire 1 K fetch_instr_pc [44] $end
$var wire 1 L fetch_instr_pc [43] $end
$var wire 1 M fetch_instr_pc [42] $end
$var wire 1 N fetch_instr_pc [41] $end
$var wire 1 O fetch_instr_pc [40] $end
$var wire 1 P fetch_instr_pc [39] $end
$var wire 1 Q fetch_instr_pc [38] $end
$var wire 1 R fetch_instr_pc [37] $end
$var wire 1 S fetch_instr_pc [36] $end
$var wire 1 T fetch_instr_pc [35] $end
$var wire 1 U fetch_instr_pc [34] $end
$var wire 1 V fetch_instr_pc [33] $end
$var wire 1 W fetch_instr_pc [32] $end
$var wire 1 X fetch_instr_pc [31] $end
$var wire 1 Y fetch_instr_pc [30] $end
$var wire 1 Z fetch_instr_pc [29] $end
$var wire 1 [ fetch_instr_pc [28] $end
$var wire 1 \ fetch_instr_pc [27] $end
$var wire 1 ] fetch_instr_pc [26] $end
$var wire 1 ^ fetch_instr_pc [25] $end
$var wire 1 _ fetch_instr_pc [24] $end
$var wire 1 ` fetch_instr_pc [23] $end
$var wire 1 a fetch_instr_pc [22] $end
$var wire 1 b fetch_instr_pc [21] $end
$var wire 1 c fetch_instr_pc [20] $end
$var wire 1 d fetch_instr_pc [19] $end
$var wire 1 e fetch_instr_pc [18] $end
$var wire 1 f fetch_instr_pc [17] $end
$var wire 1 g fetch_instr_pc [16] $end
$var wire 1 h fetch_instr_pc [15] $end
$var wire 1 i fetch_instr_pc [14] $end
$var wire 1 j fetch_instr_pc [13] $end
$var wire 1 k fetch_instr_pc [12] $end
$var wire 1 l fetch_instr_pc [11] $end
$var wire 1 m fetch_instr_pc [10] $end
$var wire 1 n fetch_instr_pc [9] $end
$var wire 1 o fetch_instr_pc [8] $end
$var wire 1 p fetch_instr_pc [7] $end
$var wire 1 q fetch_instr_pc [6] $end
$var wire 1 r fetch_instr_pc [5] $end
$var wire 1 s fetch_instr_pc [4] $end
$var wire 1 t fetch_instr_pc [3] $end
$var wire 1 u fetch_instr_pc [2] $end
$var wire 1 v fetch_instr_pc [1] $end
$var wire 1 w fetch_instr_pc [0] $end
$var wire 1 x instr_valid $end
$var wire 1 y rs1_valid $end
$var wire 1 z rs2_valid $end
$var wire 1 { rs1_data [31] $end
$var wire 1 | rs1_data [30] $end
$var wire 1 } rs1_data [29] $end
$var wire 1 ~ rs1_data [28] $end
$var wire 1 !! rs1_data [27] $end
$var wire 1 "! rs1_data [26] $end
$var wire 1 #! rs1_data [25] $end
$var wire 1 $! rs1_data [24] $end
$var wire 1 %! rs1_data [23] $end
$var wire 1 &! rs1_data [22] $end
$var wire 1 '! rs1_data [21] $end
$var wire 1 (! rs1_data [20] $end
$var wire 1 )! rs1_data [19] $end
$var wire 1 *! rs1_data [18] $end
$var wire 1 +! rs1_data [17] $end
$var wire 1 ,! rs1_data [16] $end
$var wire 1 -! rs1_data [15] $end
$var wire 1 .! rs1_data [14] $end
$var wire 1 /! rs1_data [13] $end
$var wire 1 0! rs1_data [12] $end
$var wire 1 1! rs1_data [11] $end
$var wire 1 2! rs1_data [10] $end
$var wire 1 3! rs1_data [9] $end
$var wire 1 4! rs1_data [8] $end
$var wire 1 5! rs1_data [7] $end
$var wire 1 6! rs1_data [6] $end
$var wire 1 7! rs1_data [5] $end
$var wire 1 8! rs1_data [4] $end
$var wire 1 9! rs1_data [3] $end
$var wire 1 :! rs1_data [2] $end
$var wire 1 ;! rs1_data [1] $end
$var wire 1 <! rs1_data [0] $end
$var wire 1 =! rs2_data [31] $end
$var wire 1 >! rs2_data [30] $end
$var wire 1 ?! rs2_data [29] $end
$var wire 1 @! rs2_data [28] $end
$var wire 1 A! rs2_data [27] $end
$var wire 1 B! rs2_data [26] $end
$var wire 1 C! rs2_data [25] $end
$var wire 1 D! rs2_data [24] $end
$var wire 1 E! rs2_data [23] $end
$var wire 1 F! rs2_data [22] $end
$var wire 1 G! rs2_data [21] $end
$var wire 1 H! rs2_data [20] $end
$var wire 1 I! rs2_data [19] $end
$var wire 1 J! rs2_data [18] $end
$var wire 1 K! rs2_data [17] $end
$var wire 1 L! rs2_data [16] $end
$var wire 1 M! rs2_data [15] $end
$var wire 1 N! rs2_data [14] $end
$var wire 1 O! rs2_data [13] $end
$var wire 1 P! rs2_data [12] $end
$var wire 1 Q! rs2_data [11] $end
$var wire 1 R! rs2_data [10] $end
$var wire 1 S! rs2_data [9] $end
$var wire 1 T! rs2_data [8] $end
$var wire 1 U! rs2_data [7] $end
$var wire 1 V! rs2_data [6] $end
$var wire 1 W! rs2_data [5] $end
$var wire 1 X! rs2_data [4] $end
$var wire 1 Y! rs2_data [3] $end
$var wire 1 Z! rs2_data [2] $end
$var wire 1 [! rs2_data [1] $end
$var wire 1 \! rs2_data [0] $end
$var wire 1 ]! au_free [2] $end
$var wire 1 ^! au_free [1] $end
$var wire 1 _! au_free [0] $end
$var wire 1 `! mul_free [2] $end
$var wire 1 a! mul_free [1] $end
$var wire 1 b! mul_free [0] $end
$var wire 1 c! lsu_free $end
$var wire 1 d! busy $end
$var wire 1 e! rs1 [4] $end
$var wire 1 f! rs1 [3] $end
$var wire 1 g! rs1 [2] $end
$var wire 1 h! rs1 [1] $end
$var wire 1 i! rs1 [0] $end
$var wire 1 j! rs2 [4] $end
$var wire 1 k! rs2 [3] $end
$var wire 1 l! rs2 [2] $end
$var wire 1 m! rs2 [1] $end
$var wire 1 n! rs2 [0] $end
$var wire 1 o! jump $end
$var wire 1 p! jump_wait $end
$var wire 1 q! jump_accept $end
$var wire 1 r! jump_addr [31] $end
$var wire 1 s! jump_addr [30] $end
$var wire 1 t! jump_addr [29] $end
$var wire 1 u! jump_addr [28] $end
$var wire 1 v! jump_addr [27] $end
$var wire 1 w! jump_addr [26] $end
$var wire 1 x! jump_addr [25] $end
$var wire 1 y! jump_addr [24] $end
$var wire 1 z! jump_addr [23] $end
$var wire 1 {! jump_addr [22] $end
$var wire 1 |! jump_addr [21] $end
$var wire 1 }! jump_addr [20] $end
$var wire 1 ~! jump_addr [19] $end
$var wire 1 !" jump_addr [18] $end
$var wire 1 "" jump_addr [17] $end
$var wire 1 #" jump_addr [16] $end
$var wire 1 $" jump_addr [15] $end
$var wire 1 %" jump_addr [14] $end
$var wire 1 &" jump_addr [13] $end
$var wire 1 '" jump_addr [12] $end
$var wire 1 (" jump_addr [11] $end
$var wire 1 )" jump_addr [10] $end
$var wire 1 *" jump_addr [9] $end
$var wire 1 +" jump_addr [8] $end
$var wire 1 ," jump_addr [7] $end
$var wire 1 -" jump_addr [6] $end
$var wire 1 ." jump_addr [5] $end
$var wire 1 /" jump_addr [4] $end
$var wire 1 0" jump_addr [3] $end
$var wire 1 1" jump_addr [2] $end
$var wire 1 2" jump_addr [1] $end
$var wire 1 3" jump_addr [0] $end
$var reg 17 4" rd_rs1_rs2 [16:0] $end
$var reg 8 5" execute_type [7:0] $end
$var reg 32 6" imm_extend [31:0] $end
$var wire 1 7" instr [31] $end
$var wire 1 8" instr [30] $end
$var wire 1 9" instr [29] $end
$var wire 1 :" instr [28] $end
$var wire 1 ;" instr [27] $end
$var wire 1 <" instr [26] $end
$var wire 1 =" instr [25] $end
$var wire 1 >" instr [24] $end
$var wire 1 ?" instr [23] $end
$var wire 1 @" instr [22] $end
$var wire 1 A" instr [21] $end
$var wire 1 B" instr [20] $end
$var wire 1 C" instr [19] $end
$var wire 1 D" instr [18] $end
$var wire 1 E" instr [17] $end
$var wire 1 F" instr [16] $end
$var wire 1 G" instr [15] $end
$var wire 1 H" instr [14] $end
$var wire 1 I" instr [13] $end
$var wire 1 J" instr [12] $end
$var wire 1 K" instr [11] $end
$var wire 1 L" instr [10] $end
$var wire 1 M" instr [9] $end
$var wire 1 N" instr [8] $end
$var wire 1 O" instr [7] $end
$var wire 1 P" instr [6] $end
$var wire 1 Q" instr [5] $end
$var wire 1 R" instr [4] $end
$var wire 1 S" instr [3] $end
$var wire 1 T" instr [2] $end
$var wire 1 U" instr [1] $end
$var wire 1 V" instr [0] $end
$var wire 1 W" pc [31] $end
$var wire 1 X" pc [30] $end
$var wire 1 Y" pc [29] $end
$var wire 1 Z" pc [28] $end
$var wire 1 [" pc [27] $end
$var wire 1 \" pc [26] $end
$var wire 1 ]" pc [25] $end
$var wire 1 ^" pc [24] $end
$var wire 1 _" pc [23] $end
$var wire 1 `" pc [22] $end
$var wire 1 a" pc [21] $end
$var wire 1 b" pc [20] $end
$var wire 1 c" pc [19] $end
$var wire 1 d" pc [18] $end
$var wire 1 e" pc [17] $end
$var wire 1 f" pc [16] $end
$var wire 1 g" pc [15] $end
$var wire 1 h" pc [14] $end
$var wire 1 i" pc [13] $end
$var wire 1 j" pc [12] $end
$var wire 1 k" pc [11] $end
$var wire 1 l" pc [10] $end
$var wire 1 m" pc [9] $end
$var wire 1 n" pc [8] $end
$var wire 1 o" pc [7] $end
$var wire 1 p" pc [6] $end
$var wire 1 q" pc [5] $end
$var wire 1 r" pc [4] $end
$var wire 1 s" pc [3] $end
$var wire 1 t" pc [2] $end
$var wire 1 u" pc [1] $end
$var wire 1 v" pc [0] $end
$var wire 1 w" opcode [6] $end
$var wire 1 x" opcode [5] $end
$var wire 1 y" opcode [4] $end
$var wire 1 z" opcode [3] $end
$var wire 1 {" opcode [2] $end
$var wire 1 |" opcode [1] $end
$var wire 1 }" opcode [0] $end
$var wire 1 ~" rd [4] $end
$var wire 1 !# rd [3] $end
$var wire 1 "# rd [2] $end
$var wire 1 ## rd [1] $end
$var wire 1 $# rd [0] $end
$var wire 1 %# funct7 [6] $end
$var wire 1 &# funct7 [5] $end
$var wire 1 '# funct7 [4] $end
$var wire 1 (# funct7 [3] $end
$var wire 1 )# funct7 [2] $end
$var wire 1 *# funct7 [1] $end
$var wire 1 +# funct7 [0] $end
$var wire 1 ,# funct3 [2] $end
$var wire 1 -# funct3 [1] $end
$var wire 1 .# funct3 [0] $end
$var reg 32 /# imm [31:0] $end
$var reg 1 0# au_instr $end
$var reg 1 1# mul_instr $end
$var reg 1 2# lsu_instr $end
$var reg 5 3# execute_op [4:0] $end
$var wire 1 4# jal $end
$var wire 1 5# jalr $end
$var wire 1 6# jal_addr $end
$var wire 1 7# jalr_addr $end
$var wire 1 8# jncond_wait $end
$var wire 1 9# jcond $end
$var wire 1 :# jcond_addr [31] $end
$var wire 1 ;# jcond_addr [30] $end
$var wire 1 <# jcond_addr [29] $end
$var wire 1 =# jcond_addr [28] $end
$var wire 1 ># jcond_addr [27] $end
$var wire 1 ?# jcond_addr [26] $end
$var wire 1 @# jcond_addr [25] $end
$var wire 1 A# jcond_addr [24] $end
$var wire 1 B# jcond_addr [23] $end
$var wire 1 C# jcond_addr [22] $end
$var wire 1 D# jcond_addr [21] $end
$var wire 1 E# jcond_addr [20] $end
$var wire 1 F# jcond_addr [19] $end
$var wire 1 G# jcond_addr [18] $end
$var wire 1 H# jcond_addr [17] $end
$var wire 1 I# jcond_addr [16] $end
$var wire 1 J# jcond_addr [15] $end
$var wire 1 K# jcond_addr [14] $end
$var wire 1 L# jcond_addr [13] $end
$var wire 1 M# jcond_addr [12] $end
$var wire 1 N# jcond_addr [11] $end
$var wire 1 O# jcond_addr [10] $end
$var wire 1 P# jcond_addr [9] $end
$var wire 1 Q# jcond_addr [8] $end
$var wire 1 R# jcond_addr [7] $end
$var wire 1 S# jcond_addr [6] $end
$var wire 1 T# jcond_addr [5] $end
$var wire 1 U# jcond_addr [4] $end
$var wire 1 V# jcond_addr [3] $end
$var wire 1 W# jcond_addr [2] $end
$var wire 1 X# jcond_addr [1] $end
$var wire 1 Y# jcond_addr [0] $end
$var wire 1 Z# jcond_wait $end
$var reg 1 [# jcond_accept $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
0"
bx #
x$
x%
x&
bx '
bx (
bx )
bx *
x+
x,
bx -
bx .
0/
x0
x1
bx 2
b0 3
bx 4
b0 5
b0 4"
bx 5"
b0 6"
bx /#
x0#
x1#
x2#
bx 3#
x[#
xV"
xU"
xT"
xS"
xR"
xQ"
xP"
xO"
xN"
xM"
xL"
xK"
xJ"
xI"
xH"
xG"
xF"
xE"
xD"
xC"
xB"
xA"
x@"
x?"
x>"
x="
x<"
x;"
x:"
x9"
x8"
x7"
xv"
xu"
xt"
xs"
xr"
xq"
xp"
xo"
xn"
xm"
xl"
xk"
xj"
xi"
xh"
xg"
xf"
xe"
xd"
xc"
xb"
xa"
x`"
x_"
x^"
x]"
x\"
x["
xZ"
xY"
xX"
xW"
x}"
x|"
x{"
xz"
xy"
xx"
xw"
x$#
x##
x"#
x!#
x~"
x+#
x*#
x)#
x(#
x'#
x&#
x%#
x.#
x-#
x,#
x4#
x5#
x6#
x7#
x8#
x9#
xY#
xX#
xW#
xV#
xU#
xT#
xS#
xR#
xQ#
xP#
xO#
xN#
xM#
xL#
xK#
xJ#
xI#
xH#
xG#
xF#
xE#
xD#
xC#
xB#
xA#
x@#
x?#
x>#
x=#
x<#
x;#
x:#
xZ#
xc!
xb!
xa!
x`!
x_!
x^!
x]!
x\!
x[!
xZ!
xY!
xX!
xW!
xV!
xU!
xT!
xS!
xR!
xQ!
xP!
xO!
xN!
xM!
xL!
xK!
xJ!
xI!
xH!
xG!
xF!
xE!
xD!
xC!
xB!
xA!
x@!
x?!
x>!
x=!
x<!
x;!
x:!
x9!
x8!
x7!
x6!
x5!
x4!
x3!
x2!
x1!
x0!
x/!
x.!
x-!
x,!
x+!
x*!
x)!
x(!
x'!
x&!
x%!
x$!
x#!
x"!
x!!
x~
x}
x|
x{
xz
xy
xx
xw
xv
xu
xt
xs
xr
xq
xp
xo
xn
xm
xl
xk
xj
xi
xh
xg
xf
xe
xd
xc
xb
xa
x`
x_
x^
x]
x\
x[
xZ
xY
xX
xW
xV
xU
xT
xS
xR
xQ
xP
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
xE
xD
xC
xB
xA
x@
x?
x>
x=
x<
x;
x:
x9
x8
07
06
xd!
xi!
xh!
xg!
xf!
xe!
xn!
xm!
xl!
xk!
xj!
0o!
xp!
xq!
x3"
x2"
x1"
x0"
x/"
x."
x-"
x,"
x+"
x*"
x)"
x("
x'"
x&"
x%"
x$"
x#"
x""
x!"
x~!
x}!
x|!
x{!
xz!
xy!
xx!
xw!
xv!
xu!
xt!
xs!
xr!
$end
#10000
1!
16
#20000
0!
06
#30000
1!
16
#40000
0!
06
#50000
1!
16
#60000
1"
b100000100001100110001100000000000000000000000000000000 #
1$
1%
1&
b1010 '
b1010 (
b0 )
b1 *
1+
0!
1x
1y
1z
1b!
0a!
0`!
0_!
0^!
0]!
0\!
1[!
0Z!
1Y!
0X!
0W!
0V!
0U!
0T!
0S!
0R!
0Q!
0P!
0O!
0N!
0M!
0L!
0K!
0J!
0I!
0H!
0G!
0F!
0E!
0D!
0C!
0B!
0A!
0@!
0?!
0>!
0=!
0<!
1;!
0:!
19!
08!
07!
06!
05!
04!
03!
02!
01!
00!
0/!
0.!
0-!
0,!
0+!
0*!
0)!
0(!
0'!
0&!
0%!
0$!
0#!
0"!
0!!
0~
0}
0|
0{
0w
0v
0u
0t
0s
0r
0q
0p
0o
0n
0m
0l
0k
0j
0i
0h
0g
0f
0e
0d
0c
0b
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
1W
1V
0U
0T
0S
1R
1Q
0P
0O
1N
1M
0L
0K
0J
0I
1H
0G
0F
0E
0D
0C
1B
0A
0@
0?
0>
0=
0<
0;
0:
09
08
1c!
0Z#
08#
0p!
1q!
11
00
0v"
0u"
0t"
0s"
0r"
0q"
0p"
0o"
0n"
0m"
0l"
0k"
0j"
0i"
0h"
0g"
0f"
0e"
0d"
0c"
0b"
0a"
0`"
0_"
0^"
0]"
0\"
0["
0Z"
0Y"
0X"
0W"
17
06
1V"
1U"
0T"
0S"
0R"
1Q"
1P"
0O"
0N"
1M"
1L"
0K"
0J"
0I"
0H"
1G"
0F"
0E"
0D"
0C"
0B"
1A"
0@"
0?"
0>"
0="
0<"
0;"
0:"
09"
08"
07"
xo!
x/
06#
07#
0+#
0*#
0)#
0(#
0'#
0&#
0%#
0n!
1m!
0l!
0k!
0j!
1i!
0h!
0g!
0f!
0e!
0.#
0-#
0,#
0$#
0##
1"#
1!#
0~"
0Y#
0X#
1W#
1V#
0U#
0T#
0S#
0R#
0Q#
0P#
0O#
0N#
0M#
0L#
0K#
0J#
0I#
0H#
0G#
0F#
0E#
0D#
0C#
0B#
0A#
0@#
0?#
0>#
0=#
0<#
0;#
0:#
b1 -
b10 .
03"
02"
0/"
0."
0-"
0,"
0+"
0*"
0)"
0("
0'"
0&"
0%"
0$"
0#"
0""
0!"
0~!
0}!
0|!
0{!
0z!
0y!
0x!
0w!
0v!
0u!
0t!
0s!
0r!
b0xx00 2
1}"
1|"
0{"
0z"
0y"
1x"
1w"
19#
04#
05#
1o!
1/
11"
10"
b1100 2
00#
01#
02#
0[#
0d!
0,
#70000
1!
16
b1100100001100010 4"
b0xxxxx 5"
bx 6"
bx 5
b0xxxxx 4
b1100100001100010 3
#80000
0!
06
#90000
1!
16
#100000
0!
06
#110000
1!
16
#120000
0!
06
#130000
1!
16
#140000
0!
06
#150000
1!
16
